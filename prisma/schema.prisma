// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id       String @id @default(cuid())
  userId   Int
  type     String
  provider String

  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  userId       Int
  expires      DateTime
  sessionToken String   @unique
  csrfToken    String?   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  email         String   @unique
  name          String
  image         String?
  emailVerified String?

  accounts Account[]
  sessions Session[]
}

model AuthUser {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  email         String   @unique
  name          String
  emailVerified String?
  role          String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Niveau {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  libelle   String

  Matieres Matiere[]

  Groupes Groupe[]
}

model Matiere {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  libelle   String

  niveau   Niveau @relation(fields: [niveauId], references: [id], onDelete: Cascade)
  niveauId Int

  detailSeances detailSeance[]
}

model Seance {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  libelle   String
  duH       Int?
  duM       Int?
  auH       Int?
  auM       Int?

  detailSeances detailSeance[]
  
}

model Groupe {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  libelle   String

  niveau   Niveau @relation(fields: [niveauId], references: [id], onDelete: Cascade)
  niveauId Int

  detailSeances detailSeance[]

  Affectation_groupes Affectation_groupe[]
}

model detailSeance {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  dateSeance DateTime @db.Date

  matiere   Matiere @relation(fields: [matiereId], references: [id], onDelete: Cascade)
  matiereId Int

  seance   Seance @relation(fields: [seanceId], references: [id], onDelete: Cascade)
  seanceId Int

  groupe   Groupe @relation(fields: [groupeId], references: [id], onDelete: Cascade)
  groupeId Int

  presences     Presence[]
}

model Etudiant {
  CIN       String   @id
  createdAt DateTime @default(now())
  nom       String
  prenom    String
  email     String
  CNE       String?
  filiere String

  Affectation_groupes Affectation_groupe[]
  presences           Presence[]
  certificats           Certificat[]
}

model Affectation_groupe {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  groupe   Groupe @relation(fields: [groupeId], references: [id], onDelete: Cascade)
  groupeId Int

  etudiant Etudiant @relation(fields: [CIN], references: [CIN], onDelete: Cascade)
  CIN      String
}

model Presence {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  seance   detailSeance @relation(fields: [seanceId], references: [id], onDelete: Cascade)
  seanceId Int

  etudiant Etudiant @relation(fields: [CIN], references: [CIN], onDelete: Cascade)
  CIN      String
}

model Jourferie {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  libelle   String

  dateJF DateTime @db.Date
}

model Certificat {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  nbJour Int

  dtConsult DateTime @db.Date

  dtBO DateTime @db.Date

  est_valide Boolean

  etudiant Etudiant @relation(fields: [CIN], references: [CIN], onDelete: Cascade)
  CIN      String
}
